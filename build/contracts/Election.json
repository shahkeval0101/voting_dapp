{
  "contractName": "Election",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "candidatesCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "name": "id",
          "type": "uint256"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "votedEvent",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061005e6040805190810160405280600b81526020017f43616e64696461746520310000000000000000000000000000000000000000008152506100b0640100000000026401000000009004565b6100ab6040805190810160405280600b81526020017f43616e64696461746520320000000000000000000000000000000000000000008152506100b0640100000000026401000000009004565b6101d2565b6002600081548092919060010191905055506060604051908101604052806002548152602001828152602001600081525060016000600254815260200190815260200160002060008201518160000155602082015181600101908051906020019061011c92919061012d565b506040820151816002015590505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016e57805160ff191683800117855561019c565b8280016001018555821561019c579182015b8281111561019b578251825591602001919060010190610180565b5b5090506101a991906101ad565b5090565b6101cf91905b808211156101cb5760008160009055506001016101b3565b5090565b90565b610404806101e16000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f146100675780632d35a8a2146100945780633477ee2e146100bf578063a3ec138d14610173575b600080fd5b34801561007357600080fd5b50610092600480360381019080803590602001909291905050506101ce565b005b3480156100a057600080fd5b506100a96102f0565b6040518082815260200191505060405180910390f35b3480156100cb57600080fd5b506100ea600480360381019080803590602001909291905050506102f6565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561013657808201518184015260208101905061011b565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561017f57600080fd5b506101b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103b8565b604051808215151515815260200191505060405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561022657600080fd5b60008111801561023857506002548111155b151561024357600080fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600082815260200190815260200160002060020160008154809291906001019190505550807ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1660405160405180910390a250565b60025481565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b5050505050908060020154905083565b60006020528060005260406000206000915054906101000a900460ff16815600a165627a7a72305820dd564996e995ef833af4a7f2e3172af018d36865b219637d95c5a141054805e70029",
  "deployedBytecode": "0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f146100675780632d35a8a2146100945780633477ee2e146100bf578063a3ec138d14610173575b600080fd5b34801561007357600080fd5b50610092600480360381019080803590602001909291905050506101ce565b005b3480156100a057600080fd5b506100a96102f0565b6040518082815260200191505060405180910390f35b3480156100cb57600080fd5b506100ea600480360381019080803590602001909291905050506102f6565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561013657808201518184015260208101905061011b565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561017f57600080fd5b506101b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103b8565b604051808215151515815260200191505060405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561022657600080fd5b60008111801561023857506002548111155b151561024357600080fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600082815260200190815260200160002060020160008154809291906001019190505550807ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1660405160405180910390a250565b60025481565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b5050505050908060020154905083565b60006020528060005260406000206000915054906101000a900460ff16815600a165627a7a72305820dd564996e995ef833af4a7f2e3172af018d36865b219637d95c5a141054805e70029",
  "sourceMap": "80:2212:0:-;;;1165:196;8:9:-1;5:2;;;30:1;27;20:12;5:2;1165:196:0;1290:27;;;;;;;;;;;;;;;;;;;:12;;;:27;;;:::i;:::-;1327;;;;;;;;;;;;;;;;;;;:12;;;:27;;;:::i;:::-;80:2212;;1367:290;1485:15;;:18;;;;;;;;;;;;;1543:36;;;;;;;;;1553:15;;1543:36;;;;1570:5;1543:36;;;;1577:1;1543:36;;;1513:10;:27;1524:15;;1513:27;;;;;;;;;;;:66;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1367:290;:::o;80:2212::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "80:2212:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1663:627;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1663:627:0;;;;;;;;;;;;;;;;;;;;;;;;;;1034:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1034:27:0;;;;;;;;;;;;;;;;;;;;;;;627:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;627:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;627:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;494:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;494:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1663:627;1773:6;:18;1780:10;1773:18;;;;;;;;;;;;;;;;;;;;;;;;;1772:19;1764:28;;;;;;;;1946:1;1931:12;:16;:51;;;;;1967:15;;1951:12;:31;;1931:51;1923:60;;;;;;;;2054:4;2033:6;:18;2040:10;2033:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;2108:10;:24;2119:12;2108:24;;;;;;;;;;;:34;;;:37;;;;;;;;;;;;;2270:12;2259:24;;;;;;;;;;1663:627;:::o;1034:27::-;;;;:::o;627:44::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;494:38::-;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity 0.4.23;\n\n/**\n * The Election contract does this and that...\n */\ncontract Election {\n\n    /*//store the candidate\n    //read the candidate\n    string public candidate;//since its defined as public it will be function and not variable\n    //constructor\n    constructor() public {\n        candidate=\"Candidate 1\";\n    }*/\n    // Model a Candidate\n    struct Candidate {\n        uint id;\n        string name;\n        uint voteCount;\n    }\n\n    // Store accounts that have voted\n    mapping(address => bool) public voters;//take a account address as key of map and\n    // Store Candidates\n    // Fetch Candidate\n    mapping(uint => Candidate) public candidates;//since its public it is function and not variable\n        //with mapping we can instatiate the struct\n        //its key is number and value struct Candidate\n        //there is no way to determine the size of the mapping and to iterate over it so we keep the candidate count\n        // Store Candidates Count\n        //this example will store two candidates\n    uint public candidatesCount;//camel cache\n\n    // voted event\n    event votedEvent (\n        uint indexed _candidateId\n    );\n\n    constructor () public {//they should called as whenever our smart contract gets deployed it should be done that time\n        addCandidate(\"Candidate 1\");\n        addCandidate(\"Candidate 2\");\n    }\n\n    function addCandidate (string _name) private {//should be private as it should be handle by our smartcontract\n        candidatesCount ++;\n        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);//at next mapping insert struct with number,name,initial no of the vote\n    }\n\n    function vote (uint _candidateId) public {\n        // require that they haven't voted before\n        require(!voters[msg.sender]);//initially should be false and not of it true and thus then only should go further\n\n        // require a valid candidate\n        require(_candidateId > 0 && _candidateId <= candidatesCount);\n\n        // record that voter has voted\n        voters[msg.sender] = true;\n\n        // update candidate vote Count\n        candidates[_candidateId].voteCount ++;//whoever calls it on that id vote count should increamented by one\n\n        // trigger voted event\n        emit votedEvent(_candidateId);\n    }\n}\n\n/*This works in this way  initially model the candidate with struct then store with mapping i.e instantiating the struct */\n\n\n\n\n\n\n/*what to do \nC:\\Users\\keval\\Desktop\\project\\elections\\src\\contracts>truffle migrate --reset                                                                                                                                                                                                                                                                  Compiling your contracts...                                                                                                                                             ===========================                                                                                                                                             > Compiling .\\src\\contracts\\Election.sol                                                                                                                                > Artifacts written to C:\\Users\\keval\\Desktop\\project\\elections\\src\\abis                                                                                                > Compiled successfully using:                                                                                                                                             - solc: 0.5.8+commit.23d335f2.Emscripten.clang                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Starting migrations...                                                                                                                                                  ======================                                                                                                                                                  > Network name:    'development'                                                                                                                                        > Network id:      5777                                                                                                                                                 > Block gas limit: 0x6691b7                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             1_initial_migration.js                                                                                                                                                  ======================                                                                                                                                                                                                                                                                                                                             Replacing 'Migrations'                                                                                                                                                  ----------------------                                                                                                                                                  > transaction hash:    0xf1dd3225281fb22ae0fe293535fff75426a1d7f9c87847d8eba96f70f34ed85a                                                                               > Blocks: 0            Seconds: 0                                                                                                                                       > contract address:    0x9F50953f6ad9c114636132c393A3D64fbBC1fC0f                                                                                                       > block number:        5                                                                                                                                                > block timestamp:     1567693011                                                                                                                                       > account:             0xE3928E62110F6e9c4fE1125580aDbFfC5dEbE4F1                                                                                                       > balance:             99.9843479                                                                                                                                       > gas used:            261393                                                                                                                                           > gas price:           20 gwei                                                                                                                                          > value sent:          0 ETH                                                                                                                                            > total cost:          0.00522786 ETH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   > Saving migration to chain.                                                                                                                                            > Saving artifacts                                                                                                                                                      -------------------------------------                                                                                                                                   > Total cost:          0.00522786 ETH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2_deploy_contracts.js                                                                                                                                                   =====================                                                                                                                                                                                                                                                                                                                              Replacing 'Election'                                                                                                                                                    --------------------                                                                                                                                                    > transaction hash:    0x633c6aa04b47ae5b2e148ee27ffece8085cc9491ffe1b4e5c0b1d1f05f346618                                                                               > Blocks: 0            Seconds: 0                                                                                                                                       > contract address:    0x3aF84B7229D81d5Fd8d5C27D114894C8d2217AD2                                                                                                       > block number:        7                                                                                                                                                > block timestamp:     1567693011                                                                                                                                       > account:             0xE3928E62110F6e9c4fE1125580aDbFfC5dEbE4F1                                                                                                       > balance:             99.9768155                                                                                                                                       > gas used:            334597                                                                                                                                           > gas price:           20 gwei                                                                                                                                          > value sent:          0 ETH                                                                                                                                            > total cost:          0.00669194 ETH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   > Saving migration to chain.                                                                                                                                            > Saving artifacts                                                                                                                                                      -------------------------------------                                                                                                                                   > Total cost:          0.00669194 ETH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Summary                                                                                                                                                                 =======                                                                                                                                                                 > Total deployments:   2                                                                                                                                                > Final cost:          0.0119198 ETH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    C:\\Users\\keval\\Desktop\\project\\elections\\src\\contracts>truffle console                                                                                                  truffle(development)> Election.deployed().then(function(i){app=i})                                                                                                      undefined                                                                                                                                                               truffle(development)> i                                                                                                                                                 Thrown:                                                                                                                                                                 evalmachine.<anonymous>:0                                                                                                                                               ieferenceError: i is not defined                                                                                                                                            at evalmachine.<anonymous>:0:1                                                                                                                                          at sigintHandlersWrap (vm.js:279:15)                                                                                                                                    at Script.runInContext (vm.js:134:14)                                                                                                                                   at runScript (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:208:1)                                        at Console.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:223:1)                                at ReplManager.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\repl.js:123:1)                               at bound (domain.js:420:14)                                                                                                                                             at REPLServer.runBound [as eval] (domain.js:433:12)                                                                                                                     at REPLServer.onLine (repl.js:700:10)                                                                                                                                   at REPLServer.emit (events.js:209:13)                                                                                                                               truffle(development)> app.address                                                                                                                                       '0x3aF84B7229D81d5Fd8d5C27D114894C8d2217AD2'                                                                                                                            truffle(development)> app.candidates()                                                                                                                                  Thrown:                                                                                                                                                                 Error: Invalid number of parameters for \"candidates\". Got 0 expected 1!                                                                                                     at Object._createTxObject (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-contract\\src\\index.js:699:1)                               at Object.InvalidNumberOfParams (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-core-helpers\\src\\errors.js:32:1)                     truffle(development)> app.address(1)                                                                                                                                    Thrown:                                                                                                                                                                 evalmachine.<anonymous>:0                                                                                                                                               app.address(1)                                                                                                                                                              ^                                                                                                                                                                                                                                                                                                                                           TypeError: app.address is not a function                                                                                                                                    at evalmachine.<anonymous>:0:5                                                                                                                                          at sigintHandlersWrap (vm.js:279:15)                                                                                                                                    at Script.runInContext (vm.js:134:14)                                                                                                                                   at runScript (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:208:1)                                        at Console.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:223:1)                                at ReplManager.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\repl.js:123:1)                               at bound (domain.js:420:14)                                                                                                                                             at REPLServer.runBound [as eval] (domain.js:433:12)                                                                                                                     at REPLServer.onLine (repl.js:700:10)                                                                                                                                   at REPLServer.emit (events.js:209:13)                                                                                                                               truffle(development)> app.candidates(1)                                                                                                                                 Result {                                                                                                                                                                  '0': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 1, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      '1': 'Candidate 1',                                                                                                                                                     '2': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      id: BN {                                                                                                                                                                  negative: 0,                                                                                                                                                            words: [ 1, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      name: 'Candidate 1',                                                                                                                                                    voteCount: BN {                                                                                                                                                           negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> app.candidates(2)                                                                                                                                 Result {                                                                                                                                                                  '0': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 2, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      '1': 'Candidate 2',                                                                                                                                                     '2': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      id: BN {                                                                                                                                                                  negative: 0,                                                                                                                                                            words: [ 2, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      name: 'Candidate 2',                                                                                                                                                    voteCount: BN {                                                                                                                                                           negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> app.candidates(99)                                                                                                                                Result {                                                                                                                                                                  '0': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      '1': '',                                                                                                                                                                '2': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      id: BN {                                                                                                                                                                  negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      name: '',                                                                                                                                                               voteCount: BN {                                                                                                                                                           negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> app.candidatesCount()                                                                                                                             Thrown:                                                                                                                                                                 evalmachine.<anonymous>:0                                                                                                                                               app.candidatesCount()                                                                                                                                                       ^                                                                                                                                                                                                                                                                                                                                           TypeError: app.candidatesCount is not a function                                                                                                                            at evalmachine.<anonymous>:0:5                                                                                                                                          at sigintHandlersWrap (vm.js:279:15)                                                                                                                                    at Script.runInContext (vm.js:134:14)                                                                                                                                   at runScript (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:208:1)                                        at Console.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:223:1)                                at ReplManager.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\repl.js:123:1)                               at bound (domain.js:420:14)                                                                                                                                             at REPLServer.runBound [as eval] (domain.js:433:12)                                                                                                                     at REPLServer.onLine (repl.js:700:10)                                                                                                                                   at REPLServer.emit (events.js:209:13)                                                                                                                               truffle(development)> app.CandidatesCount                                                                                                                               [Function] {                                                                                                                                                              call: [Function],                                                                                                                                                       sendTransaction: [Function],                                                                                                                                            estimateGas: [Function],                                                                                                                                                request: [Function]                                                                                                                                                   }                                                                                                                                                                       truffle(development)> app.CandidatesCount()                                                                                                                             BN { negative: 0, words: [ 2, <1 empty item> ], length: 1, red: null }                                                                                                  truffle(development)> app.candidates(1).then(function(c){candidate=c})                                                                                                  undefined                                                                                                                                                               truffle(development)> candidate                                                                                                                                         Result {                                                                                                                                                                  '0': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 1, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      '1': 'Candidate 1',                                                                                                                                                     '2': BN {                                                                                                                                                                 negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      id: BN {                                                                                                                                                                  negative: 0,                                                                                                                                                            words: [ 1, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             },                                                                                                                                                                      name: 'Candidate 1',                                                                                                                                                    voteCount: BN {                                                                                                                                                           negative: 0,                                                                                                                                                            words: [ 0, <1 empty item> ],                                                                                                                                           length: 1,                                                                                                                                                              red: null                                                                                                                                                             }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> candidate.id                                                                                                                                      BN { negative: 0, words: [ 1, <1 empty item> ], length: 1, red: null }                                                                                                  truffle(development)> candidate[0]                                                                                                                                      BN { negative: 0, words: [ 1, <1 empty item> ], length: 1, red: null }                                                                                                  truffle(development)> candidate[1]                                                                                                                                      'Candidate 1'                                                                                                                                                           truffle(development)> candidate[2]                                                                                                                                      BN { negative: 0, words: [ 0, <1 empty item> ], length: 1, red: null }                                                                                                  truffle(development)> candidate[0].toNumber()                                                                                                                           1                                                                                                                                                                       truffle(development)> candidate[2].toNumber()                                                                                                                           0                                                                                                                                                                       truffle(development)> web3                                                                                                                                              Web3Shim {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {                                                                                                                                                  host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: Agent {                                                                                                                                                        _events: [Object: null prototype],                                                                                                                                      _eventsCount: 1,                                                                                                                                                        _maxListeners: undefined,                                                                                                                                               defaultPort: 80,                                                                                                                                                        protocol: 'http:',                                                                                                                                                      options: [Object],                                                                                                                                                      requests: {},                                                                                                                                                           sockets: {},                                                                                                                                                            freeSockets: {},                                                                                                                                                        keepAliveMsecs: 1000,                                                                                                                                                   keepAlive: false,                                                                                                                                                       maxSockets: Infinity,                                                                                                                                                   maxFreeSockets: 256                                                                                                                                                   },                                                                                                                                                                      timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: {                                                                                                                                                             inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],                                                                                         inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],                                                                                                       inputCallFormatter: [Function: inputCallFormatter],                                                                                                                     inputTransactionFormatter: [Function: inputTransactionFormatter],                                                                                                       inputAddressFormatter: [Function: inputAddressFormatter],                                                                                                               inputPostFormatter: [Function: inputPostFormatter],                                                                                                                     inputLogFormatter: [Function: inputLogFormatter],                                                                                                                       inputSignFormatter: [Function: inputSignFormatter],                                                                                                                     outputBigNumberFormatter: [Function: outputBigNumberFormatter],                                                                                                         outputTransactionFormatter: [Function: outputTransactionFormatter],                                                                                                     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],                                                                                       outputBlockFormatter: [Function: outputBlockFormatter],                                                                                                                 outputLogFormatter: [Function: outputLogFormatter],                                                                                                                     outputPostFormatter: [Function: outputPostFormatter],                                                                                                                   outputSyncingFormatter: [Function: outputSyncingFormatter]                                                                                                            },                                                                                                                                                                      utils: {                                                                                                                                                                  _fireError: [Function: _fireError],                                                                                                                                     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],                                                                                                 _flattenTypes: [Function: _flattenTypes],                                                                                                                               randomHex: [Function: randomHex],                                                                                                                                       _: [Function],                                                                                                                                                          BN: [Function],                                                                                                                                                         isBN: [Function: isBN],                                                                                                                                                 isBigNumber: [Function: isBigNumber],                                                                                                                                   isHex: [Function: isHex],                                                                                                                                               isHexStrict: [Function: isHexStrict],                                                                                                                                   sha3: [Function],                                                                                                                                                       keccak256: [Function],                                                                                                                                                  soliditySha3: [Function: soliditySha3],                                                                                                                                 isAddress: [Function: isAddress],                                                                                                                                       checkAddressChecksum: [Function: checkAddressChecksum],                                                                                                                 toChecksumAddress: [Function: toChecksumAddress],                                                                                                                       toHex: [Function: toHex],                                                                                                                                               toBN: [Function: toBN],                                                                                                                                                 bytesToHex: [Function: bytesToHex],                                                                                                                                     hexToBytes: [Function: hexToBytes],                                                                                                                                     hexToNumberString: [Function: hexToNumberString],                                                                                                                       hexToNumber: [Function: hexToNumber],                                                                                                                                   toDecimal: [Function: hexToNumber],                                                                                                                                     numberToHex: [Function: numberToHex],                                                                                                                                   fromDecimal: [Function: numberToHex],                                                                                                                                   hexToUtf8: [Function: hexToUtf8],                                                                                                                                       hexToString: [Function: hexToUtf8],                                                                                                                                     toUtf8: [Function: hexToUtf8],                                                                                                                                          utf8ToHex: [Function: utf8ToHex],                                                                                                                                       stringToHex: [Function: utf8ToHex],                                                                                                                                     fromUtf8: [Function: utf8ToHex],                                                                                                                                        hexToAscii: [Function: hexToAscii],                                                                                                                                     toAscii: [Function: hexToAscii],                                                                                                                                        asciiToHex: [Function: asciiToHex],                                                                                                                                     fromAscii: [Function: asciiToHex],                                                                                                                                      unitMap: [Object],                                                                                                                                                      toWei: [Function: toWei],                                                                                                                                               fromWei: [Function: fromWei],                                                                                                                                           padLeft: [Function: leftPad],                                                                                                                                           leftPad: [Function: leftPad],                                                                                                                                           padRight: [Function: rightPad],                                                                                                                                         rightPad: [Function: rightPad],                                                                                                                                         toTwosComplement: [Function: toTwosComplement]                                                                                                                        },                                                                                                                                                                      Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      version: '1.2.1',                                                                                                                                                       utils: {                                                                                                                                                                  _fireError: [Function: _fireError],                                                                                                                                     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],                                                                                                 _flattenTypes: [Function: _flattenTypes],                                                                                                                               randomHex: [Function: randomHex],                                                                                                                                       _: [Function: _] {                                                                                                                                                        _: [Circular],                                                                                                                                                          VERSION: '1.9.1',                                                                                                                                                       iteratee: [Function: builtinIteratee],                                                                                                                                  forEach: [Function],                                                                                                                                                    each: [Function],                                                                                                                                                       collect: [Function],                                                                                                                                                    map: [Function],                                                                                                                                                        inject: [Function],                                                                                                                                                     foldl: [Function],                                                                                                                                                      reduce: [Function],                                                                                                                                                     foldr: [Function],                                                                                                                                                      reduceRight: [Function],                                                                                                                                                detect: [Function],                                                                                                                                                     find: [Function],                                                                                                                                                       select: [Function],                                                                                                                                                     filter: [Function],                                                                                                                                                     reject: [Function],                                                                                                                                                     all: [Function],                                                                                                                                                        every: [Function],                                                                                                                                                      any: [Function],                                                                                                                                                        some: [Function],                                                                                                                                                       include: [Function],                                                                                                                                                    includes: [Function],                                                                                                                                                   contains: [Function],                                                                                                                                                   invoke: [Function],                                                                                                                                                     pluck: [Function],                                                                                                                                                      where: [Function],                                                                                                                                                      findWhere: [Function],                                                                                                                                                  max: [Function],                                                                                                                                                        min: [Function],                                                                                                                                                        shuffle: [Function],                                                                                                                                                    sample: [Function],                                                                                                                                                     sortBy: [Function],                                                                                                                                                     groupBy: [Function],                                                                                                                                                    indexBy: [Function],                                                                                                                                                    countBy: [Function],                                                                                                                                                    toArray: [Function],                                                                                                                                                    size: [Function],                                                                                                                                                       partition: [Function],                                                                                                                                                  take: [Function],                                                                                                                                                       head: [Function],                                                                                                                                                       first: [Function],                                                                                                                                                      initial: [Function],                                                                                                                                                    last: [Function],                                                                                                                                                       drop: [Function],                                                                                                                                                       tail: [Function],                                                                                                                                                       rest: [Function],                                                                                                                                                       compact: [Function],                                                                                                                                                    flatten: [Function],                                                                                                                                                    without: [Function],                                                                                                                                                    unique: [Function],                                                                                                                                                     uniq: [Function],                                                                                                                                                       union: [Function],                                                                                                                                                      intersection: [Function],                                                                                                                                               difference: [Function],                                                                                                                                                 unzip: [Function],                                                                                                                                                      zip: [Function],                                                                                                                                                        object: [Function],                                                                                                                                                     findIndex: [Function],                                                                                                                                                  findLastIndex: [Function],                                                                                                                                              sortedIndex: [Function],                                                                                                                                                indexOf: [Function],                                                                                                                                                    lastIndexOf: [Function],                                                                                                                                                range: [Function],                                                                                                                                                      chunk: [Function],                                                                                                                                                      bind: [Function],                                                                                                                                                       partial: [Function],                                                                                                                                                    bindAll: [Function],                                                                                                                                                    memoize: [Function],                                                                                                                                                    delay: [Function],                                                                                                                                                      defer: [Function: bound],                                                                                                                                               throttle: [Function],                                                                                                                                                   debounce: [Function],                                                                                                                                                   wrap: [Function],                                                                                                                                                       negate: [Function],                                                                                                                                                     compose: [Function],                                                                                                                                                    after: [Function],                                                                                                                                                      before: [Function],                                                                                                                                                     once: [Function: bound],                                                                                                                                                restArguments: [Function: restArguments],                                                                                                                               keys: [Function],                                                                                                                                                       allKeys: [Function],                                                                                                                                                    values: [Function],                                                                                                                                                     mapObject: [Function],                                                                                                                                                  pairs: [Function],                                                                                                                                                      invert: [Function],                                                                                                                                                     methods: [Function],                                                                                                                                                    functions: [Function],                                                                                                                                                  extend: [Function],                                                                                                                                                     assign: [Function],                                                                                                                                                     extendOwn: [Function],                                                                                                                                                  findKey: [Function],                                                                                                                                                    pick: [Function],                                                                                                                                                       omit: [Function],                                                                                                                                                       defaults: [Function],                                                                                                                                                   create: [Function],                                                                                                                                                     clone: [Function],                                                                                                                                                      tap: [Function],                                                                                                                                                        isMatch: [Function],                                                                                                                                                    isEqual: [Function],                                                                                                                                                    isEmpty: [Function],                                                                                                                                                    isElement: [Function],                                                                                                                                                  isArray: [Function: isArray],                                                                                                                                           isObject: [Function],                                                                                                                                                   isArguments: [Function],                                                                                                                                                isFunction: [Function],                                                                                                                                                 isString: [Function],                                                                                                                                                   isNumber: [Function],                                                                                                                                                   isDate: [Function],                                                                                                                                                     isRegExp: [Function],                                                                                                                                                   isError: [Function],                                                                                                                                                    isSymbol: [Function],                                                                                                                                                   isMap: [Function],                                                                                                                                                      isWeakMap: [Function],                                                                                                                                                  isSet: [Function],                                                                                                                                                      isWeakSet: [Function],                                                                                                                                                  isFinite: [Function],                                                                                                                                                   isNaN: [Function],                                                                                                                                                      isBoolean: [Function],                                                                                                                                                  isNull: [Function],                                                                                                                                                     isUndefined: [Function],                                                                                                                                                has: [Function],                                                                                                                                                        noConflict: [Function],                                                                                                                                                 identity: [Function],                                                                                                                                                   constant: [Function],                                                                                                                                                   noop: [Function],                                                                                                                                                       property: [Function],                                                                                                                                                   propertyOf: [Function],                                                                                                                                                 matches: [Function],                                                                                                                                                    matcher: [Function],                                                                                                                                                    times: [Function],                                                                                                                                                      random: [Function],                                                                                                                                                     now: [Function: now],                                                                                                                                                   escape: [Function],                                                                                                                                                     unescape: [Function],                                                                                                                                                   result: [Function],                                                                                                                                                     uniqueId: [Function],                                                                                                                                                   templateSettings: [Object],                                                                                                                                             template: [Function],                                                                                                                                                   chain: [Function],                                                                                                                                                      mixin: [Function]                                                                                                                                                     },                                                                                                                                                                      BN: [Function: BN] {                                                                                                                                                      BN: [Circular],                                                                                                                                                         wordSize: 26,                                                                                                                                                           isBN: [Function: isBN],                                                                                                                                                 max: [Function: max],                                                                                                                                                   min: [Function: min],                                                                                                                                                   red: [Function: red],                                                                                                                                                   _prime: [Function: prime],                                                                                                                                              mont: [Function: mont]                                                                                                                                                },                                                                                                                                                                      isBN: [Function: isBN],                                                                                                                                                 isBigNumber: [Function: isBigNumber],                                                                                                                                   isHex: [Function: isHex],                                                                                                                                               isHexStrict: [Function: isHexStrict],                                                                                                                                   sha3: [Function: sha3] { _Hash: [Object] },                                                                                                                             keccak256: [Function: sha3] { _Hash: [Object] },                                                                                                                        soliditySha3: [Function: soliditySha3],                                                                                                                                 isAddress: [Function: isAddress],                                                                                                                                       checkAddressChecksum: [Function: checkAddressChecksum],                                                                                                                 toChecksumAddress: [Function: toChecksumAddress],                                                                                                                       toHex: [Function: toHex],                                                                                                                                               toBN: [Function: toBN],                                                                                                                                                 bytesToHex: [Function: bytesToHex],                                                                                                                                     hexToBytes: [Function: hexToBytes],                                                                                                                                     hexToNumberString: [Function: hexToNumberString],                                                                                                                       hexToNumber: [Function: hexToNumber],                                                                                                                                   toDecimal: [Function: hexToNumber],                                                                                                                                     numberToHex: [Function: numberToHex],                                                                                                                                   fromDecimal: [Function: numberToHex],                                                                                                                                   hexToUtf8: [Function: hexToUtf8],                                                                                                                                       hexToString: [Function: hexToUtf8],                                                                                                                                     toUtf8: [Function: hexToUtf8],                                                                                                                                          utf8ToHex: [Function: utf8ToHex],                                                                                                                                       stringToHex: [Function: utf8ToHex],                                                                                                                                     fromUtf8: [Function: utf8ToHex],                                                                                                                                        hexToAscii: [Function: hexToAscii],                                                                                                                                     toAscii: [Function: hexToAscii],                                                                                                                                        asciiToHex: [Function: asciiToHex],                                                                                                                                     fromAscii: [Function: asciiToHex],                                                                                                                                      unitMap: {                                                                                                                                                                noether: '0',                                                                                                                                                           wei: '1',                                                                                                                                                               kwei: '1000',                                                                                                                                                           Kwei: '1000',                                                                                                                                                           babbage: '1000',                                                                                                                                                        femtoether: '1000',                                                                                                                                                     mwei: '1000000',                                                                                                                                                        Mwei: '1000000',                                                                                                                                                        lovelace: '1000000',                                                                                                                                                    picoether: '1000000',                                                                                                                                                   gwei: '1000000000',                                                                                                                                                     Gwei: '1000000000',                                                                                                                                                     shannon: '1000000000',                                                                                                                                                  nanoether: '1000000000',                                                                                                                                                nano: '1000000000',                                                                                                                                                     szabo: '1000000000000',                                                                                                                                                 microether: '1000000000000',                                                                                                                                            micro: '1000000000000',                                                                                                                                                 finney: '1000000000000000',                                                                                                                                             milliether: '1000000000000000',                                                                                                                                         milli: '1000000000000000',                                                                                                                                              ether: '1000000000000000000',                                                                                                                                           kether: '1000000000000000000000',                                                                                                                                       grand: '1000000000000000000000',                                                                                                                                        mether: '1000000000000000000000000',                                                                                                                                    gether: '1000000000000000000000000000',                                                                                                                                 tether: '1000000000000000000000000000000'                                                                                                                             },                                                                                                                                                                      toWei: [Function: toWei],                                                                                                                                               fromWei: [Function: fromWei],                                                                                                                                           padLeft: [Function: leftPad],                                                                                                                                           leftPad: [Function: leftPad],                                                                                                                                           padRight: [Function: rightPad],                                                                                                                                         rightPad: [Function: rightPad],                                                                                                                                         toTwosComplement: [Function: toTwosComplement]                                                                                                                        },                                                                                                                                                                      eth: Eth {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: [HttpProvider],                                                                                                                                               providers: [Object],                                                                                                                                                    subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: [Object],                                                                                                                                                   utils: [Object],                                                                                                                                                        Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      defaultAccount: [Getter/Setter],                                                                                                                                        defaultBlock: [Getter/Setter],                                                                                                                                          clearSubscriptions: [Function],                                                                                                                                         net: Net {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     getId: [Function],                                                                                                                                                      isListening: [Function],                                                                                                                                                getPeerCount: [Function],                                                                                                                                               getNetworkType: [Function: bound getNetworkType]                                                                                                                      },                                                                                                                                                                      accounts: Accounts {                                                                                                                                                      currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                _ethereumCall: [Object],                                                                                                                                                wallet: [Wallet]                                                                                                                                                      },                                                                                                                                                                      personal: Personal {                                                                                                                                                      currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     net: [Net],                                                                                                                                                             defaultAccount: [Getter/Setter],                                                                                                                                        defaultBlock: [Getter/Setter],                                                                                                                                          getAccounts: [Function],                                                                                                                                                newAccount: [Function],                                                                                                                                                 unlockAccount: [Function],                                                                                                                                              lockAccount: [Function],                                                                                                                                                importRawKey: [Function],                                                                                                                                               sendTransaction: [Function],                                                                                                                                            signTransaction: [Function],                                                                                                                                            sign: [Function],                                                                                                                                                       ecRecover: [Function]                                                                                                                                                 },                                                                                                                                                                      Contract: [Function: Contract] {                                                                                                                                          setProvider: [Function],                                                                                                                                                defaultAccount: null,                                                                                                                                                   defaultBlock: 'latest',                                                                                                                                                 currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     _ethAccounts: [Accounts]                                                                                                                                              },                                                                                                                                                                      Iban: [Function: Iban] {                                                                                                                                                  toAddress: [Function],                                                                                                                                                  toIban: [Function],                                                                                                                                                     fromAddress: [Function],                                                                                                                                                fromBban: [Function],                                                                                                                                                   createIndirect: [Function],                                                                                                                                             isValid: [Function]                                                                                                                                                   },                                                                                                                                                                      abi: ABICoder {},                                                                                                                                                       ens: ENS { eth: [Circular] },                                                                                                                                           getNodeInfo: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'web3_clientVersion'                                                                                                                                            },                                                                                                                                                                      getProtocolVersion: [Function: send] {                                                                                                                                    method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_protocolVersion'                                                                                                                                           },                                                                                                                                                                      getCoinbase: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_coinbase'                                                                                                                                                  },                                                                                                                                                                      isMining: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_mining'                                                                                                                                                    },                                                                                                                                                                      getHashrate: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_hashrate'                                                                                                                                                  },                                                                                                                                                                      isSyncing: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_syncing'                                                                                                                                                   },                                                                                                                                                                      getGasPrice: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_gasPrice'                                                                                                                                                  },                                                                                                                                                                      getAccounts: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_accounts'                                                                                                                                                  },                                                                                                                                                                      getBlockNumber: [Function: send] {                                                                                                                                        method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_blockNumber'                                                                                                                                               },                                                                                                                                                                      getBalance: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getBalance'                                                                                                                                                },                                                                                                                                                                      getStorageAt: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getStorageAt'                                                                                                                                              },                                                                                                                                                                      getCode: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getCode'                                                                                                                                                   },                                                                                                                                                                      getBlock: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: blockCall]                                                                                                                                           },                                                                                                                                                                      getUncle: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: uncleCall]                                                                                                                                           },                                                                                                                                                                      getBlockTransactionCount: [Function: send] {                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: getBlockTransactionCountCall]                                                                                                                        },                                                                                                                                                                      getBlockUncleCount: [Function: send] {                                                                                                                                    method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: uncleCountCall]                                                                                                                                      },                                                                                                                                                                      getTransaction: [Function: send] {                                                                                                                                        method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionByHash'                                                                                                                                      },                                                                                                                                                                      getTransactionFromBlock: [Function: send] {                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: transactionFromBlockCall]                                                                                                                            },                                                                                                                                                                      getTransactionReceipt: [Function: send] {                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionReceipt'                                                                                                                                     },                                                                                                                                                                      getTransactionCount: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionCount'                                                                                                                                       },                                                                                                                                                                      sendSignedTransaction: [Function: send] {                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sendRawTransaction'                                                                                                                                        },                                                                                                                                                                      signTransaction: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_signTransaction'                                                                                                                                           },                                                                                                                                                                      sendTransaction: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sendTransaction'                                                                                                                                           },                                                                                                                                                                      sign: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sign'                                                                                                                                                      },                                                                                                                                                                      call: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_call'                                                                                                                                                      },                                                                                                                                                                      estimateGas: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_estimateGas'                                                                                                                                               },                                                                                                                                                                      submitWork: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_submitWork'                                                                                                                                                },                                                                                                                                                                      getWork: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getWork'                                                                                                                                                   },                                                                                                                                                                      getPastLogs: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getLogs'                                                                                                                                                   },                                                                                                                                                                      subscribe: [Function]                                                                                                                                                 },                                                                                                                                                                      shh: Shh {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: [HttpProvider],                                                                                                                                               providers: [Object],                                                                                                                                                    subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: [Object],                                                                                                                                                   utils: [Object],                                                                                                                                                        Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      net: Net {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     getId: [Function],                                                                                                                                                      isListening: [Function],                                                                                                                                                getPeerCount: [Function]                                                                                                                                              },                                                                                                                                                                      subscribe: [Function],                                                                                                                                                  getVersion: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_version'                                                                                                                                                   },                                                                                                                                                                      getInfo: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_info'                                                                                                                                                      },                                                                                                                                                                      setMaxMessageSize: [Function: send] {                                                                                                                                     method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_setMaxMessageSize'                                                                                                                                         },                                                                                                                                                                      setMinPoW: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_setMinPoW'                                                                                                                                                 },                                                                                                                                                                      markTrustedPeer: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_markTrustedPeer'                                                                                                                                           },                                                                                                                                                                      newKeyPair: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newKeyPair'                                                                                                                                                },                                                                                                                                                                      addPrivateKey: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_addPrivateKey'                                                                                                                                             },                                                                                                                                                                      deleteKeyPair: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteKeyPair'                                                                                                                                             },                                                                                                                                                                      hasKeyPair: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_hasKeyPair'                                                                                                                                                },                                                                                                                                                                      getPublicKey: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getPublicKey'                                                                                                                                              },                                                                                                                                                                      getPrivateKey: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getPrivateKey'                                                                                                                                             },                                                                                                                                                                      newSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newSymKey'                                                                                                                                                 },                                                                                                                                                                      addSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_addSymKey'                                                                                                                                                 },                                                                                                                                                                      generateSymKeyFromPassword: [Function: send] {                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_generateSymKeyFromPassword'                                                                                                                                },                                                                                                                                                                      hasSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_hasSymKey'                                                                                                                                                 },                                                                                                                                                                      getSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getSymKey'                                                                                                                                                 },                                                                                                                                                                      deleteSymKey: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteSymKey'                                                                                                                                              },                                                                                                                                                                      newMessageFilter: [Function: send] {                                                                                                                                      method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newMessageFilter'                                                                                                                                          },                                                                                                                                                                      getFilterMessages: [Function: send] {                                                                                                                                     method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getFilterMessages'                                                                                                                                         },                                                                                                                                                                      deleteMessageFilter: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteMessageFilter'                                                                                                                                       },                                                                                                                                                                      post: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_post'                                                                                                                                                      },                                                                                                                                                                      unsubscribe: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_unsubscribe'                                                                                                                                               }                                                                                                                                                                     },                                                                                                                                                                      bzz: Bzz {                                                                                                                                                                givenProvider: null,                                                                                                                                                    currentProvider: null,                                                                                                                                                  isAvailable: [Function],                                                                                                                                                upload: [Function],                                                                                                                                                     download: [Function]                                                                                                                                                  },                                                                                                                                                                      networkType: 'ethereum'                                                                                                                                               }                                                                                                                                                                       truffle(development)> web3.eth.accounts                                                                                                                                 Accounts {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {                                                                                                                                                  host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: Agent {                                                                                                                                                        _events: [Object: null prototype],                                                                                                                                      _eventsCount: 1,                                                                                                                                                        _maxListeners: undefined,                                                                                                                                               defaultPort: 80,                                                                                                                                                        protocol: 'http:',                                                                                                                                                      options: [Object],                                                                                                                                                      requests: {},                                                                                                                                                           sockets: {},                                                                                                                                                            freeSockets: {},                                                                                                                                                        keepAliveMsecs: 1000,                                                                                                                                                   keepAlive: false,                                                                                                                                                       maxSockets: Infinity,                                                                                                                                                   maxFreeSockets: 256                                                                                                                                                   },                                                                                                                                                                      timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                _ethereumCall: {                                                                                                                                                          getId: [Function: send] {                                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'net_version'                                                                                                                                                   },                                                                                                                                                                      getGasPrice: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_gasPrice'                                                                                                                                                  },                                                                                                                                                                      getTransactionCount: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionCount'                                                                                                                                       }                                                                                                                                                                     },                                                                                                                                                                      wallet: Wallet {                                                                                                                                                          _accounts: [Circular],                                                                                                                                                  length: 0,                                                                                                                                                              defaultKeyName: 'web3js_wallet'                                                                                                                                       }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> web3.eth.accounts                                                                                                                                 Accounts {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {                                                                                                                                                  host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                truffle(development)> web3.eth.accounts[1]                                                                                                                              undefineder: HttpProvider {                                                                                                                                             truffle(development)> web3                                                                                                                                              Web3Shim {ent: Agent {                                                                                                                                                    currentProvider: [Getter/Setter],ype],                                                                                                                                  _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {ed,                                                                                                                                               host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,bject],                                                                                                                                                      headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },keepAlive: false,                                                                                                                                                     providers: {: Infinity,                                                                                                                                                   WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },aders: undefined,                                                                                                                                                     subscriptions: {}                                                                                                                                                     },send: [Function],                                                                                                                                                     givenProvider: null,rue                                                                                                                                                 providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },  method: [Method],                                                                                                                                                   _provider: HttpProvider {ound ],                                                                                                                                          host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: Agent {                                                                                                                                                        _events: [Object: null prototype],                                                                                                                                      _eventsCount: 1,,                                                                                                                                                       _maxListeners: undefined, ],                                                                                                                                            defaultPort: 80,ice'                                                                                                                                                    protocol: 'http:',                                                                                                                                                      options: [Object], [Function: send] {                                                                                                                                   requests: {},od],                                                                                                                                                       sockets: {},nction: bound ],                                                                                                                                            freeSockets: {},ansactionCount'                                                                                                                                         keepAliveMsecs: 1000,                                                                                                                                                   keepAlive: false,                                                                                                                                                       maxSockets: Infinity,                                                                                                                                                   maxFreeSockets: 256,                                                                                                                                                  },ngth: 0,                                                                                                                                                              timeout: 0,ame: 'web3js_wallet'                                                                                                                                         headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: {                                                                                                                                                             inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],                                                                                         inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],                                                                                                       inputCallFormatter: [Function: inputCallFormatter],                                                                                                                     inputTransactionFormatter: [Function: inputTransactionFormatter],                                                                                                       inputAddressFormatter: [Function: inputAddressFormatter],                                                                                                               inputPostFormatter: [Function: inputPostFormatter],                                                                                                                     inputLogFormatter: [Function: inputLogFormatter],                                                                                                                       inputSignFormatter: [Function: inputSignFormatter],                                                                                                                     outputBigNumberFormatter: [Function: outputBigNumberFormatter],                                                                                                         outputTransactionFormatter: [Function: outputTransactionFormatter],                                                                                                     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],                                                                                       outputBlockFormatter: [Function: outputBlockFormatter],                                                                                                                 outputLogFormatter: [Function: outputLogFormatter],                                                                                                                     outputPostFormatter: [Function: outputPostFormatter],                                                                                                                   outputSyncingFormatter: [Function: outputSyncingFormatter]                                                                                                            },                                                                                                                                                                      utils: {                                                                                                                                                                  _fireError: [Function: _fireError],                                                                                                                                     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],                                                                                                 _flattenTypes: [Function: _flattenTypes],                                                                                                                               randomHex: [Function: randomHex],                                                                                                                                       _: [Function],                                                                                                                                                          BN: [Function],                                                                                                                                                         isBN: [Function: isBN],                                                                                                                                                 isBigNumber: [Function: isBigNumber],                                                                                                                                   isHex: [Function: isHex],                                                                                                                                               isHexStrict: [Function: isHexStrict],                                                                                                                                   sha3: [Function],                                                                                                                                                       keccak256: [Function],                                                                                                                                                  soliditySha3: [Function: soliditySha3],                                                                                                                                 isAddress: [Function: isAddress],                                                                                                                                       checkAddressChecksum: [Function: checkAddressChecksum],                                                                                                                 toChecksumAddress: [Function: toChecksumAddress],                                                                                                                       toHex: [Function: toHex],                                                                                                                                               toBN: [Function: toBN],                                                                                                                                                 bytesToHex: [Function: bytesToHex],                                                                                                                                     hexToBytes: [Function: hexToBytes],                                                                                                                                     hexToNumberString: [Function: hexToNumberString],                                                                                                                       hexToNumber: [Function: hexToNumber],                                                                                                                                   toDecimal: [Function: hexToNumber],                                                                                                                                     numberToHex: [Function: numberToHex],                                                                                                                                   fromDecimal: [Function: numberToHex],                                                                                                                                   hexToUtf8: [Function: hexToUtf8],                                                                                                                                       hexToString: [Function: hexToUtf8],                                                                                                                                     toUtf8: [Function: hexToUtf8],                                                                                                                                          utf8ToHex: [Function: utf8ToHex],                                                                                                                                       stringToHex: [Function: utf8ToHex],                                                                                                                                     fromUtf8: [Function: utf8ToHex],                                                                                                                                        hexToAscii: [Function: hexToAscii],                                                                                                                                     toAscii: [Function: hexToAscii],                                                                                                                                        asciiToHex: [Function: asciiToHex],                                                                                                                                     fromAscii: [Function: asciiToHex],                                                                                                                                      unitMap: [Object],                                                                                                                                                      toWei: [Function: toWei],                                                                                                                                               fromWei: [Function: fromWei],                                                                                                                                           padLeft: [Function: leftPad],                                                                                                                                           leftPad: [Function: leftPad],                                                                                                                                           padRight: [Function: rightPad],                                                                                                                                         rightPad: [Function: rightPad],                                                                                                                                         toTwosComplement: [Function: toTwosComplement]                                                                                                                        },                                                                                                                                                                      Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      version: '1.2.1',                                                                                                                                                       utils: {                                                                                                                                                                  _fireError: [Function: _fireError],                                                                                                                                     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],                                                                                                 _flattenTypes: [Function: _flattenTypes],                                                                                                                               randomHex: [Function: randomHex],                                                                                                                                       _: [Function: _] {                                                                                                                                                        _: [Circular],                                                                                                                                                          VERSION: '1.9.1',                                                                                                                                                       iteratee: [Function: builtinIteratee],                                                                                                                                  forEach: [Function],                                                                                                                                                    each: [Function],                                                                                                                                                       collect: [Function],                                                                                                                                                    map: [Function],                                                                                                                                                        inject: [Function],                                                                                                                                                     foldl: [Function],                                                                                                                                                      reduce: [Function],                                                                                                                                                     foldr: [Function],                                                                                                                                                      reduceRight: [Function],                                                                                                                                                detect: [Function],                                                                                                                                                     find: [Function],                                                                                                                                                       select: [Function],                                                                                                                                                     filter: [Function],                                                                                                                                                     reject: [Function],                                                                                                                                                     all: [Function],                                                                                                                                                        every: [Function],                                                                                                                                                      any: [Function],                                                                                                                                                        some: [Function],                                                                                                                                                       include: [Function],                                                                                                                                                    includes: [Function],                                                                                                                                                   contains: [Function],                                                                                                                                                   invoke: [Function],                                                                                                                                                     pluck: [Function],                                                                                                                                                      where: [Function],                                                                                                                                                      findWhere: [Function],                                                                                                                                                  max: [Function],                                                                                                                                                        min: [Function],                                                                                                                                                        shuffle: [Function],                                                                                                                                                    sample: [Function],                                                                                                                                                     sortBy: [Function],                                                                                                                                                     groupBy: [Function],                                                                                                                                                    indexBy: [Function],                                                                                                                                                    countBy: [Function],                                                                                                                                                    toArray: [Function],                                                                                                                                                    size: [Function],                                                                                                                                                       partition: [Function],                                                                                                                                                  take: [Function],                                                                                                                                                       head: [Function],                                                                                                                                                       first: [Function],                                                                                                                                                      initial: [Function],                                                                                                                                                    last: [Function],                                                                                                                                                       drop: [Function],                                                                                                                                                       tail: [Function],                                                                                                                                                       rest: [Function],                                                                                                                                                       compact: [Function],                                                                                                                                                    flatten: [Function],                                                                                                                                                    without: [Function],                                                                                                                                                    unique: [Function],                                                                                                                                                     uniq: [Function],                                                                                                                                                       union: [Function],                                                                                                                                                      intersection: [Function],                                                                                                                                               difference: [Function],                                                                                                                                                 unzip: [Function],                                                                                                                                                      zip: [Function],                                                                                                                                                        object: [Function],                                                                                                                                                     findIndex: [Function],                                                                                                                                                  findLastIndex: [Function],                                                                                                                                              sortedIndex: [Function],                                                                                                                                                indexOf: [Function],                                                                                                                                                    lastIndexOf: [Function],                                                                                                                                                range: [Function],                                                                                                                                                      chunk: [Function],                                                                                                                                                      bind: [Function],                                                                                                                                                       partial: [Function],                                                                                                                                                    bindAll: [Function],                                                                                                                                                    memoize: [Function],                                                                                                                                                    delay: [Function],                                                                                                                                                      defer: [Function: bound],                                                                                                                                               throttle: [Function],                                                                                                                                                   debounce: [Function],                                                                                                                                                   wrap: [Function],                                                                                                                                                       negate: [Function],                                                                                                                                                     compose: [Function],                                                                                                                                                    after: [Function],                                                                                                                                                      before: [Function],                                                                                                                                                     once: [Function: bound],                                                                                                                                                restArguments: [Function: restArguments],                                                                                                                               keys: [Function],                                                                                                                                                       allKeys: [Function],                                                                                                                                                    values: [Function],                                                                                                                                                     mapObject: [Function],                                                                                                                                                  pairs: [Function],                                                                                                                                                      invert: [Function],                                                                                                                                                     methods: [Function],                                                                                                                                                    functions: [Function],                                                                                                                                                  extend: [Function],                                                                                                                                                     assign: [Function],                                                                                                                                                     extendOwn: [Function],                                                                                                                                                  findKey: [Function],                                                                                                                                                    pick: [Function],                                                                                                                                                       omit: [Function],                                                                                                                                                       defaults: [Function],                                                                                                                                                   create: [Function],                                                                                                                                                     clone: [Function],                                                                                                                                                      tap: [Function],                                                                                                                                                        isMatch: [Function],                                                                                                                                                    isEqual: [Function],                                                                                                                                                    isEmpty: [Function],                                                                                                                                                    isElement: [Function],                                                                                                                                                  isArray: [Function: isArray],                                                                                                                                           isObject: [Function],                                                                                                                                                   isArguments: [Function],                                                                                                                                                isFunction: [Function],                                                                                                                                                 isString: [Function],                                                                                                                                                   isNumber: [Function],                                                                                                                                                   isDate: [Function],                                                                                                                                                     isRegExp: [Function],                                                                                                                                                   isError: [Function],                                                                                                                                                    isSymbol: [Function],                                                                                                                                                   isMap: [Function],                                                                                                                                                      isWeakMap: [Function],                                                                                                                                                  isSet: [Function],                                                                                                                                                      isWeakSet: [Function],                                                                                                                                                  isFinite: [Function],                                                                                                                                                   isNaN: [Function],                                                                                                                                                      isBoolean: [Function],                                                                                                                                                  isNull: [Function],                                                                                                                                                     isUndefined: [Function],                                                                                                                                                has: [Function],                                                                                                                                                        noConflict: [Function],                                                                                                                                                 identity: [Function],                                                                                                                                                   constant: [Function],                                                                                                                                                   noop: [Function],                                                                                                                                                       property: [Function],                                                                                                                                                   propertyOf: [Function],                                                                                                                                                 matches: [Function],                                                                                                                                                    matcher: [Function],                                                                                                                                                    times: [Function],                                                                                                                                                      random: [Function],                                                                                                                                                     now: [Function: now],                                                                                                                                                   escape: [Function],                                                                                                                                                     unescape: [Function],                                                                                                                                                   result: [Function],                                                                                                                                                     uniqueId: [Function],                                                                                                                                                   templateSettings: [Object],                                                                                                                                             template: [Function],                                                                                                                                                   chain: [Function],                                                                                                                                                      mixin: [Function]                                                                                                                                                     },                                                                                                                                                                      BN: [Function: BN] {                                                                                                                                                      BN: [Circular],                                                                                                                                                         wordSize: 26,                                                                                                                                                           isBN: [Function: isBN],                                                                                                                                                 max: [Function: max],                                                                                                                                                   min: [Function: min],                                                                                                                                                   red: [Function: red],                                                                                                                                                   _prime: [Function: prime],                                                                                                                                              mont: [Function: mont]                                                                                                                                                },                                                                                                                                                                      isBN: [Function: isBN],                                                                                                                                                 isBigNumber: [Function: isBigNumber],                                                                                                                                   isHex: [Function: isHex],                                                                                                                                               isHexStrict: [Function: isHexStrict],                                                                                                                                   sha3: [Function: sha3] { _Hash: [Object] },                                                                                                                             keccak256: [Function: sha3] { _Hash: [Object] },                                                                                                                        soliditySha3: [Function: soliditySha3],                                                                                                                                 isAddress: [Function: isAddress],                                                                                                                                       checkAddressChecksum: [Function: checkAddressChecksum],                                                                                                                 toChecksumAddress: [Function: toChecksumAddress],                                                                                                                       toHex: [Function: toHex],                                                                                                                                               toBN: [Function: toBN],                                                                                                                                                 bytesToHex: [Function: bytesToHex],                                                                                                                                     hexToBytes: [Function: hexToBytes],                                                                                                                                     hexToNumberString: [Function: hexToNumberString],                                                                                                                       hexToNumber: [Function: hexToNumber],                                                                                                                                   toDecimal: [Function: hexToNumber],                                                                                                                                     numberToHex: [Function: numberToHex],                                                                                                                                   fromDecimal: [Function: numberToHex],                                                                                                                                   hexToUtf8: [Function: hexToUtf8],                                                                                                                                       hexToString: [Function: hexToUtf8],                                                                                                                                     toUtf8: [Function: hexToUtf8],                                                                                                                                          utf8ToHex: [Function: utf8ToHex],                                                                                                                                       stringToHex: [Function: utf8ToHex],                                                                                                                                     fromUtf8: [Function: utf8ToHex],                                                                                                                                        hexToAscii: [Function: hexToAscii],                                                                                                                                     toAscii: [Function: hexToAscii],                                                                                                                                        asciiToHex: [Function: asciiToHex],                                                                                                                                     fromAscii: [Function: asciiToHex],                                                                                                                                      unitMap: {                                                                                                                                                                noether: '0',                                                                                                                                                           wei: '1',                                                                                                                                                               kwei: '1000',                                                                                                                                                           Kwei: '1000',                                                                                                                                                           babbage: '1000',                                                                                                                                                        femtoether: '1000',                                                                                                                                                     mwei: '1000000',                                                                                                                                                        Mwei: '1000000',                                                                                                                                                        lovelace: '1000000',                                                                                                                                                    picoether: '1000000',                                                                                                                                                   gwei: '1000000000',                                                                                                                                                     Gwei: '1000000000',                                                                                                                                                     shannon: '1000000000',                                                                                                                                                  nanoether: '1000000000',                                                                                                                                                nano: '1000000000',                                                                                                                                                     szabo: '1000000000000',                                                                                                                                                 microether: '1000000000000',                                                                                                                                            micro: '1000000000000',                                                                                                                                                 finney: '1000000000000000',                                                                                                                                             milliether: '1000000000000000',                                                                                                                                         milli: '1000000000000000',                                                                                                                                              ether: '1000000000000000000',                                                                                                                                           kether: '1000000000000000000000',                                                                                                                                       grand: '1000000000000000000000',                                                                                                                                        mether: '1000000000000000000000000',                                                                                                                                    gether: '1000000000000000000000000000',                                                                                                                                 tether: '1000000000000000000000000000000'                                                                                                                             },                                                                                                                                                                      toWei: [Function: toWei],                                                                                                                                               fromWei: [Function: fromWei],                                                                                                                                           padLeft: [Function: leftPad],                                                                                                                                           leftPad: [Function: leftPad],                                                                                                                                           padRight: [Function: rightPad],                                                                                                                                         rightPad: [Function: rightPad],                                                                                                                                         toTwosComplement: [Function: toTwosComplement]                                                                                                                        },                                                                                                                                                                      eth: Eth {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: [HttpProvider],                                                                                                                                               providers: [Object],                                                                                                                                                    subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: [Object],                                                                                                                                                   utils: [Object],                                                                                                                                                        Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      defaultAccount: [Getter/Setter],                                                                                                                                        defaultBlock: [Getter/Setter],                                                                                                                                          clearSubscriptions: [Function],                                                                                                                                         net: Net {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     getId: [Function],                                                                                                                                                      isListening: [Function],                                                                                                                                                getPeerCount: [Function],                                                                                                                                               getNetworkType: [Function: bound getNetworkType]                                                                                                                      },                                                                                                                                                                      accounts: Accounts {                                                                                                                                                      currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                _ethereumCall: [Object],                                                                                                                                                wallet: [Wallet]                                                                                                                                                      },                                                                                                                                                                      personal: Personal {                                                                                                                                                      currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     net: [Net],                                                                                                                                                             defaultAccount: [Getter/Setter],                                                                                                                                        defaultBlock: [Getter/Setter],                                                                                                                                          getAccounts: [Function],                                                                                                                                                newAccount: [Function],                                                                                                                                                 unlockAccount: [Function],                                                                                                                                              lockAccount: [Function],                                                                                                                                                importRawKey: [Function],                                                                                                                                               sendTransaction: [Function],                                                                                                                                            signTransaction: [Function],                                                                                                                                            sign: [Function],                                                                                                                                                       ecRecover: [Function]                                                                                                                                                 },                                                                                                                                                                      Contract: [Function: Contract] {                                                                                                                                          setProvider: [Function],                                                                                                                                                defaultAccount: null,                                                                                                                                                   defaultBlock: 'latest',                                                                                                                                                 currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     _ethAccounts: [Accounts]                                                                                                                                              },                                                                                                                                                                      Iban: [Function: Iban] {                                                                                                                                                  toAddress: [Function],                                                                                                                                                  toIban: [Function],                                                                                                                                                     fromAddress: [Function],                                                                                                                                                fromBban: [Function],                                                                                                                                                   createIndirect: [Function],                                                                                                                                             isValid: [Function]                                                                                                                                                   },                                                                                                                                                                      abi: ABICoder {},                                                                                                                                                       ens: ENS { eth: [Circular] },                                                                                                                                           getNodeInfo: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'web3_clientVersion'                                                                                                                                            },                                                                                                                                                                      getProtocolVersion: [Function: send] {                                                                                                                                    method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_protocolVersion'                                                                                                                                           },                                                                                                                                                                      getCoinbase: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_coinbase'                                                                                                                                                  },                                                                                                                                                                      isMining: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_mining'                                                                                                                                                    },                                                                                                                                                                      getHashrate: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_hashrate'                                                                                                                                                  },                                                                                                                                                                      isSyncing: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_syncing'                                                                                                                                                   },                                                                                                                                                                      getGasPrice: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_gasPrice'                                                                                                                                                  },                                                                                                                                                                      getAccounts: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_accounts'                                                                                                                                                  },                                                                                                                                                                      getBlockNumber: [Function: send] {                                                                                                                                        method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_blockNumber'                                                                                                                                               },                                                                                                                                                                      getBalance: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getBalance'                                                                                                                                                },                                                                                                                                                                      getStorageAt: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getStorageAt'                                                                                                                                              },                                                                                                                                                                      getCode: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getCode'                                                                                                                                                   },                                                                                                                                                                      getBlock: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: blockCall]                                                                                                                                           },                                                                                                                                                                      getUncle: [Function: send] {                                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: uncleCall]                                                                                                                                           },                                                                                                                                                                      getBlockTransactionCount: [Function: send] {                                                                                                                              method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: getBlockTransactionCountCall]                                                                                                                        },                                                                                                                                                                      getBlockUncleCount: [Function: send] {                                                                                                                                    method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: uncleCountCall]                                                                                                                                      },                                                                                                                                                                      getTransaction: [Function: send] {                                                                                                                                        method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionByHash'                                                                                                                                      },                                                                                                                                                                      getTransactionFromBlock: [Function: send] {                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: [Function: transactionFromBlockCall]                                                                                                                            },                                                                                                                                                                      getTransactionReceipt: [Function: send] {                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionReceipt'                                                                                                                                     },                                                                                                                                                                      getTransactionCount: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionCount'                                                                                                                                       },                                                                                                                                                                      sendSignedTransaction: [Function: send] {                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sendRawTransaction'                                                                                                                                        },                                                                                                                                                                      signTransaction: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_signTransaction'                                                                                                                                           },                                                                                                                                                                      sendTransaction: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sendTransaction'                                                                                                                                           },                                                                                                                                                                      sign: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_sign'                                                                                                                                                      },                                                                                                                                                                      call: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_call'                                                                                                                                                      },                                                                                                                                                                      estimateGas: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_estimateGas'                                                                                                                                               },                                                                                                                                                                      submitWork: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_submitWork'                                                                                                                                                },                                                                                                                                                                      getWork: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getWork'                                                                                                                                                   },                                                                                                                                                                      getPastLogs: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getLogs'                                                                                                                                                   },                                                                                                                                                                      subscribe: [Function]                                                                                                                                                 },                                                                                                                                                                      shh: Shh {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: [HttpProvider],                                                                                                                                               providers: [Object],                                                                                                                                                    subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function: ex] {                                                                                                                                                  formatters: [Object],                                                                                                                                                   utils: [Object],                                                                                                                                                        Method: [Function: Method]                                                                                                                                            },                                                                                                                                                                      net: Net {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: [RequestManager],                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: [Object],                                                                                                                                                    _provider: [HttpProvider],                                                                                                                                              setProvider: [Function],                                                                                                                                                BatchRequest: [Function: bound Batch],                                                                                                                                  extend: [Function],                                                                                                                                                     getId: [Function],                                                                                                                                                      isListening: [Function],                                                                                                                                                getPeerCount: [Function]                                                                                                                                              },                                                                                                                                                                      subscribe: [Function],                                                                                                                                                  getVersion: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_version'                                                                                                                                                   },                                                                                                                                                                      getInfo: [Function: send] {                                                                                                                                               method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_info'                                                                                                                                                      },                                                                                                                                                                      setMaxMessageSize: [Function: send] {                                                                                                                                     method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_setMaxMessageSize'                                                                                                                                         },                                                                                                                                                                      setMinPoW: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_setMinPoW'                                                                                                                                                 },                                                                                                                                                                      markTrustedPeer: [Function: send] {                                                                                                                                       method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_markTrustedPeer'                                                                                                                                           },                                                                                                                                                                      newKeyPair: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newKeyPair'                                                                                                                                                },                                                                                                                                                                      addPrivateKey: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_addPrivateKey'                                                                                                                                             },                                                                                                                                                                      deleteKeyPair: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteKeyPair'                                                                                                                                             },                                                                                                                                                                      hasKeyPair: [Function: send] {                                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_hasKeyPair'                                                                                                                                                },                                                                                                                                                                      getPublicKey: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getPublicKey'                                                                                                                                              },                                                                                                                                                                      getPrivateKey: [Function: send] {                                                                                                                                         method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getPrivateKey'                                                                                                                                             },                                                                                                                                                                      newSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newSymKey'                                                                                                                                                 },                                                                                                                                                                      addSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_addSymKey'                                                                                                                                                 },                                                                                                                                                                      generateSymKeyFromPassword: [Function: send] {                                                                                                                            method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_generateSymKeyFromPassword'                                                                                                                                },                                                                                                                                                                      hasSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_hasSymKey'                                                                                                                                                 },                                                                                                                                                                      getSymKey: [Function: send] {                                                                                                                                             method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getSymKey'                                                                                                                                                 },                                                                                                                                                                      deleteSymKey: [Function: send] {                                                                                                                                          method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteSymKey'                                                                                                                                              },                                                                                                                                                                      newMessageFilter: [Function: send] {                                                                                                                                      method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_newMessageFilter'                                                                                                                                          },                                                                                                                                                                      getFilterMessages: [Function: send] {                                                                                                                                     method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_getFilterMessages'                                                                                                                                         },                                                                                                                                                                      deleteMessageFilter: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_deleteMessageFilter'                                                                                                                                       },                                                                                                                                                                      post: [Function: send] {                                                                                                                                                  method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_post'                                                                                                                                                      },                                                                                                                                                                      unsubscribe: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'shh_unsubscribe'                                                                                                                                               }                                                                                                                                                                     },                                                                                                                                                                      bzz: Bzz {                                                                                                                                                                givenProvider: null,                                                                                                                                                    currentProvider: null,                                                                                                                                                  isAvailable: [Function],                                                                                                                                                upload: [Function],                                                                                                                                                     download: [Function]                                                                                                                                                  },                                                                                                                                                                      networkType: 'ethereum'                                                                                                                                               }                                                                                                                                                                       truffle(development)> web3.eth.accounts                                                                                                                                 Accounts {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {                                                                                                                                                  host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: Agent {                                                                                                                                                        _events: [Object: null prototype],                                                                                                                                      _eventsCount: 1,                                                                                                                                                        _maxListeners: undefined,                                                                                                                                               defaultPort: 80,                                                                                                                                                        protocol: 'http:',                                                                                                                                                      options: [Object],                                                                                                                                                      requests: {},                                                                                                                                                           sockets: {},                                                                                                                                                            freeSockets: {},                                                                                                                                                        keepAliveMsecs: 1000,                                                                                                                                                   keepAlive: false,                                                                                                                                                       maxSockets: Infinity,                                                                                                                                                   maxFreeSockets: 256                                                                                                                                                   },                                                                                                                                                                      timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                _ethereumCall: {                                                                                                                                                          getId: [Function: send] {                                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'net_version'                                                                                                                                                   },                                                                                                                                                                      getGasPrice: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_gasPrice'                                                                                                                                                  },                                                                                                                                                                      getTransactionCount: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionCount'                                                                                                                                       }                                                                                                                                                                     },                                                                                                                                                                      wallet: Wallet {                                                                                                                                                          _accounts: [Circular],                                                                                                                                                  length: 0,                                                                                                                                                              defaultKeyName: 'web3js_wallet'                                                                                                                                       }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> web3.eth.accounts[1]                                                                                                                              undefined                                                                                                                                                               truffle(development)> web3.eth.accounts[1].then(function(a){acc=a})                                                                                                     Thrown:                                                                                                                                                                 evalmachine.<anonymous>:0                                                                                                                                               web3.eth.accounts[1].then(function(a){acc=a})                                                                                                                                                ^                                                                                                                                                                                                                                                                                                                          TypeError: Cannot read property 'then' of undefined                                                                                                                         at evalmachine.<anonymous>:0:22                                                                                                                                         at sigintHandlersWrap (vm.js:279:15)                                                                                                                                    at Script.runInContext (vm.js:134:14)                                                                                                                                   at runScript (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:208:1)                                        at Console.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:223:1)                                at ReplManager.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\repl.js:123:1)                               at bound (domain.js:420:14)                                                                                                                                             at REPLServer.runBound [as eval] (domain.js:433:12)                                                                                                                     at REPLServer.onLine (repl.js:700:10)                                                                                                                                   at REPLServer.emit (events.js:209:13)                                                                                                                               truffle(development)> web3.eth.accounts[2].then(function(a){acc=a})                                                                                                     Thrown:                                                                                                                                                                 evalmachine.<anonymous>:0                                                                                                                                               web3.eth.accounts[2].then(function(a){acc=a})                                                                                                                                                ^                                                                                                                                                                                                                                                                                                                          TypeError: Cannot read property 'then' of undefined                                                                                                                         at evalmachine.<anonymous>:0:22                                                                                                                                         at sigintHandlersWrap (vm.js:279:15)                                                                                                                                    at Script.runInContext (vm.js:134:14)                                                                                                                                   at runScript (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:208:1)                                        at Console.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\console.js:223:1)                                at ReplManager.interpret (C:\\Users\\keval\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\repl.js:123:1)                               at bound (domain.js:420:14)                                                                                                                                             at REPLServer.runBound [as eval] (domain.js:433:12)                                                                                                                     at REPLServer.onLine (repl.js:700:10)                                                                                                                                   at REPLServer.emit (events.js:209:13)                                                                                                                               truffle(development)> web3.eth.accounts                                                                                                                                 Accounts {                                                                                                                                                                currentProvider: [Getter/Setter],                                                                                                                                       _requestManager: RequestManager {                                                                                                                                         provider: HttpProvider {                                                                                                                                                  host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: [Agent],                                                                                                                                                     timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      subscriptions: {}                                                                                                                                                     },                                                                                                                                                                      givenProvider: null,                                                                                                                                                    providers: {                                                                                                                                                              WebsocketProvider: [Function: WebsocketProvider],                                                                                                                       HttpProvider: [Function: HttpProvider],                                                                                                                                 IpcProvider: [Function: IpcProvider]                                                                                                                                  },                                                                                                                                                                      _provider: HttpProvider {                                                                                                                                                 host: 'http://127.0.0.1:7545',                                                                                                                                          httpAgent: Agent {                                                                                                                                                        _events: [Object: null prototype],                                                                                                                                      _eventsCount: 1,                                                                                                                                                        _maxListeners: undefined,                                                                                                                                               defaultPort: 80,                                                                                                                                                        protocol: 'http:',                                                                                                                                                      options: [Object],                                                                                                                                                      requests: {},                                                                                                                                                           sockets: {},                                                                                                                                                            freeSockets: {},                                                                                                                                                        keepAliveMsecs: 1000,                                                                                                                                                   keepAlive: false,                                                                                                                                                       maxSockets: Infinity,                                                                                                                                                   maxFreeSockets: 256                                                                                                                                                   },                                                                                                                                                                      timeout: 0,                                                                                                                                                             headers: undefined,                                                                                                                                                     connected: true,                                                                                                                                                        send: [Function],                                                                                                                                                       _alreadyWrapped: true                                                                                                                                                 },                                                                                                                                                                      setProvider: [Function],                                                                                                                                                _ethereumCall: {                                                                                                                                                          getId: [Function: send] {                                                                                                                                                 method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'net_version'                                                                                                                                                   },                                                                                                                                                                      getGasPrice: [Function: send] {                                                                                                                                           method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_gasPrice'                                                                                                                                                  },                                                                                                                                                                      getTransactionCount: [Function: send] {                                                                                                                                   method: [Method],                                                                                                                                                       request: [Function: bound ],                                                                                                                                            call: 'eth_getTransactionCount'                                                                                                                                       }                                                                                                                                                                     },                                                                                                                                                                      wallet: Wallet {                                                                                                                                                          _accounts: [Circular],                                                                                                                                                  length: 0,                                                                                                                                                              defaultKeyName: 'web3js_wallet'                                                                                                                                       }                                                                                                                                                                     }                                                                                                                                                                       truffle(development)> web3.eth.accounts[0]                                                                                                                              undefined                                                                                                                                                               truffle(development)> web3.eth.accounts[1]                                                                                                                              undefined                                                                                                                                                               truffle(development)>                                                                                                                                                   undefined                                                                                                                                                               truffle(development)>                                                                                                                                                       \nC:\\Users\\keval\\Desktop\\project\\elections\\src\\contracts>truffle migrate --reset\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.0119198 ETH\n\n\nC:\\Users\\keval\\Desktop\\project\\elections\\src\\contracts>truffle console\ntruffle(development)> Election.deployed().then(function(i){app=i})\nundefined\ntruffle(development)> app.address\n'0x3aF84B7229D81d5Fd8d5C27D114894C8d2217AD2'\ntruffle(development)> app.candidates(1)\nResult {\n  '0': BN {\n    negative: 0,\n    words: [ 1, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  '1': 'Candidate 1',\n  '2': BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  id: BN {\n    negative: 0,\n    words: [ 1, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  name: 'Candidate 1',\n  voteCount: BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  }\n}\ntruffle(development)> app.candidates(2)\nResult {\n  '0': BN {\n    negative: 0,\n    words: [ 2, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  '1': 'Candidate 2',\n  '2': BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  id: BN {\n    negative: 0,\n    words: [ 2, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  name: 'Candidate 2',\n  voteCount: BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  }\n}\ntruffle(development)> app.candidates(99)\nResult {\n  '0': BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  '1': '',\n  '2': BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  id: BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  name: '',\n  voteCount: BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  }\n}\n\ntruffle(development)> app.CandidatesCount()\nBN { negative: 0, words: [ 2, <1 empty item> ], length: 1, red: null }\n\ntruffle(development)> app.candidates(1).then(function(c){candidate=c})\nundefined\ntruffle(development)> candidate\nResult {\n  '0': BN {\n    negative: 0,\n    words: [ 1, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  '1': 'Candidate 1',\n  '2': BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  id: BN {\n    negative: 0,\n    words: [ 1, <1 empty item> ],\n    length: 1,\n    red: null\n  },\n  name: 'Candidate 1',\n  voteCount: BN {\n    negative: 0,\n    words: [ 0, <1 empty item> ],\n    length: 1,\n    red: null\n  }\n}\ntruffle(development)> candidate.id\nBN { negative: 0, words: [ 1, <1 empty item> ], length: 1, red: null }\ntruffle(development)> candidate[0] --for id\nBN { negative: 0, words: [ 1, <1 empty item> ], length: 1, red: null }\ntruffle(development)> candidate[1] --for name\n'Candidate 1'\ntruffle(development)> candidate[2] -- for count\nBN { negative: 0, words: [ 0, <1 empty item> ], length: 1, red: null }\ntruffle(development)> candidate[0].toNumber()\n1\ntruffle(development)> candidate[2].toNumber()\n0\nweb3\ntruffle(development)> web3.eth.getAccounts\ntruffle(development)> web3.eth.getAccounts[1]\nundefined\n\n\ntruffle(development)> web3.eth.getAccounts[0]\nundefined\ntruffle(development)> web3.eth.getAccounts[1]\nundefined\ntruffle(development)>\nundefined\ntruffle(development)> web3.eth.getAccounts[0]\n\n\n\n\n*/",
  "sourcePath": "C:\\Users\\keval\\Desktop\\project\\voting_dapp\\election-2019_update\\election-2019_update\\contracts\\Election.sol",
  "ast": {
    "absolutePath": "/C/Users/keval/Desktop/project/voting_dapp/election-2019_update/election-2019_update/contracts/Election.sol",
    "exportedSymbols": {
      "Election": [
        95
      ]
    },
    "id": 96,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "The Election contract does this and that...",
        "fullyImplemented": true,
        "id": 95,
        "linearizedBaseContracts": [
          95
        ],
        "name": "Election",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Election.Candidate",
            "id": 8,
            "members": [
              {
                "constant": false,
                "id": 3,
                "name": "id",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "391:7:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "391:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "name": "name",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "408:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "408:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "name": "voteCount",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "429:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "429:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nodeType": "StructDefinition",
            "scope": 95,
            "src": "364:86:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "name": "voters",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "494:38:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "502:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "494:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "513:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 16,
            "name": "candidates",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "627:44:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
              "typeString": "mapping(uint256 => struct Election.Candidate)"
            },
            "typeName": {
              "id": 15,
              "keyType": {
                "id": 13,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "635:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "627:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                "typeString": "mapping(uint256 => struct Election.Candidate)"
              },
              "valueType": {
                "contractScope": null,
                "id": 14,
                "name": "Candidate",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 8,
                "src": "643:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$8_storage_ptr",
                  "typeString": "struct Election.Candidate"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 18,
            "name": "candidatesCount",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "1034:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1034:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 22,
            "name": "votedEvent",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20,
                  "indexed": true,
                  "name": "_candidateId",
                  "nodeType": "VariableDeclaration",
                  "scope": 22,
                  "src": "1127:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1127:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1117:41:0"
            },
            "src": "1100:59:0"
          },
          {
            "body": {
              "id": 33,
              "nodeType": "Block",
              "src": "1187:174:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6469646174652031",
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1303:13:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        },
                        "value": "Candidate 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        }
                      ],
                      "id": 25,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "1290:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1290:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "1290:27:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6469646174652032",
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1340:13:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        },
                        "value": "Candidate 2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        }
                      ],
                      "id": 29,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "1327:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1327:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "1327:27:0"
                }
              ]
            },
            "documentation": null,
            "id": 34,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1177:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1187:0:0"
            },
            "scope": 95,
            "src": "1165:196:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 52,
              "nodeType": "Block",
              "src": "1412:245:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "1485:18:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 39,
                      "name": "candidatesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "1485:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 41,
                  "nodeType": "ExpressionStatement",
                  "src": "1485:18:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 50,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "1513:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                          "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                        }
                      },
                      "id": 44,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18,
                        "src": "1524:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1513:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_storage",
                        "typeString": "struct Election.Candidate storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 46,
                          "name": "candidatesCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18,
                          "src": "1553:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 47,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 36,
                          "src": "1570:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 48,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1577:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 45,
                        "name": "Candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "1543:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Candidate_$8_storage_ptr_$",
                          "typeString": "type(struct Election.Candidate storage pointer)"
                        }
                      },
                      "id": 49,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1543:36:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_memory",
                        "typeString": "struct Election.Candidate memory"
                      }
                    },
                    "src": "1513:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$8_storage",
                      "typeString": "struct Election.Candidate storage ref"
                    }
                  },
                  "id": 51,
                  "nodeType": "ExpressionStatement",
                  "src": "1513:66:0"
                }
              ]
            },
            "documentation": null,
            "id": 53,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "addCandidate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "1390:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 35,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1390:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1389:14:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 38,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1412:0:0"
            },
            "scope": 95,
            "src": "1367:290:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 93,
              "nodeType": "Block",
              "src": "1704:586:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1772:19:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 59,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "1773:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 62,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "1780:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1780:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1773:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 58,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        170,
                        171
                      ],
                      "referencedDeclaration": 170,
                      "src": "1764:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1764:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:28:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 73,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 69,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 67,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55,
                            "src": "1931:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 68,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1946:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1931:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 72,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 70,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55,
                            "src": "1951:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 71,
                            "name": "candidatesCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18,
                            "src": "1967:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1951:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1931:51:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        170,
                        171
                      ],
                      "referencedDeclaration": 170,
                      "src": "1923:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 74,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1923:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 75,
                  "nodeType": "ExpressionStatement",
                  "src": "1923:60:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 81,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 76,
                        "name": "voters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "2033:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 79,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 77,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2040:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2040:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2033:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 80,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2054:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2033:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 82,
                  "nodeType": "ExpressionStatement",
                  "src": "2033:25:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "2108:37:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 83,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "2108:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                            "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                          }
                        },
                        "id": 85,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 84,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55,
                          "src": "2119:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2108:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$8_storage",
                          "typeString": "struct Election.Candidate storage ref"
                        }
                      },
                      "id": 86,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "2108:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "2108:37:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 90,
                        "name": "_candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55,
                        "src": "2270:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 89,
                      "name": "votedEvent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22,
                      "src": "2259:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 91,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2259:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 92,
                  "nodeType": "EmitStatement",
                  "src": "2254:29:0"
                }
              ]
            },
            "documentation": null,
            "id": 94,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "vote",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "name": "_candidateId",
                  "nodeType": "VariableDeclaration",
                  "scope": 94,
                  "src": "1678:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1678:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1677:19:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 57,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1704:0:0"
            },
            "scope": 95,
            "src": "1663:627:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 96,
        "src": "80:2212:0"
      }
    ],
    "src": "0:352502:0"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/keval/Desktop/project/voting_dapp/election-2019_update/election-2019_update/contracts/Election.sol",
    "exportedSymbols": {
      "Election": [
        95
      ]
    },
    "id": 96,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "The Election contract does this and that...",
        "fullyImplemented": true,
        "id": 95,
        "linearizedBaseContracts": [
          95
        ],
        "name": "Election",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Election.Candidate",
            "id": 8,
            "members": [
              {
                "constant": false,
                "id": 3,
                "name": "id",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "391:7:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "391:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "name": "name",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "408:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "408:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "name": "voteCount",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "429:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "429:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nodeType": "StructDefinition",
            "scope": 95,
            "src": "364:86:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "name": "voters",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "494:38:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "502:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "494:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "513:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 16,
            "name": "candidates",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "627:44:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
              "typeString": "mapping(uint256 => struct Election.Candidate)"
            },
            "typeName": {
              "id": 15,
              "keyType": {
                "id": 13,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "635:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "627:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                "typeString": "mapping(uint256 => struct Election.Candidate)"
              },
              "valueType": {
                "contractScope": null,
                "id": 14,
                "name": "Candidate",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 8,
                "src": "643:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$8_storage_ptr",
                  "typeString": "struct Election.Candidate"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 18,
            "name": "candidatesCount",
            "nodeType": "VariableDeclaration",
            "scope": 95,
            "src": "1034:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1034:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 22,
            "name": "votedEvent",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20,
                  "indexed": true,
                  "name": "_candidateId",
                  "nodeType": "VariableDeclaration",
                  "scope": 22,
                  "src": "1127:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1127:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1117:41:0"
            },
            "src": "1100:59:0"
          },
          {
            "body": {
              "id": 33,
              "nodeType": "Block",
              "src": "1187:174:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6469646174652031",
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1303:13:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        },
                        "value": "Candidate 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        }
                      ],
                      "id": 25,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "1290:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1290:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "1290:27:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6469646174652032",
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1340:13:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        },
                        "value": "Candidate 2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        }
                      ],
                      "id": 29,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "1327:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1327:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "1327:27:0"
                }
              ]
            },
            "documentation": null,
            "id": 34,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1177:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1187:0:0"
            },
            "scope": 95,
            "src": "1165:196:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 52,
              "nodeType": "Block",
              "src": "1412:245:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "1485:18:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 39,
                      "name": "candidatesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "1485:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 41,
                  "nodeType": "ExpressionStatement",
                  "src": "1485:18:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 50,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "1513:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                          "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                        }
                      },
                      "id": 44,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18,
                        "src": "1524:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1513:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_storage",
                        "typeString": "struct Election.Candidate storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 46,
                          "name": "candidatesCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18,
                          "src": "1553:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 47,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 36,
                          "src": "1570:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 48,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1577:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 45,
                        "name": "Candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "1543:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Candidate_$8_storage_ptr_$",
                          "typeString": "type(struct Election.Candidate storage pointer)"
                        }
                      },
                      "id": 49,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1543:36:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_memory",
                        "typeString": "struct Election.Candidate memory"
                      }
                    },
                    "src": "1513:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$8_storage",
                      "typeString": "struct Election.Candidate storage ref"
                    }
                  },
                  "id": 51,
                  "nodeType": "ExpressionStatement",
                  "src": "1513:66:0"
                }
              ]
            },
            "documentation": null,
            "id": 53,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "addCandidate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "1390:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 35,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1390:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1389:14:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 38,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1412:0:0"
            },
            "scope": 95,
            "src": "1367:290:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 93,
              "nodeType": "Block",
              "src": "1704:586:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1772:19:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 59,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "1773:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 62,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "1780:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1780:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1773:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 58,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        170,
                        171
                      ],
                      "referencedDeclaration": 170,
                      "src": "1764:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1764:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:28:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 73,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 69,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 67,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55,
                            "src": "1931:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 68,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1946:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1931:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 72,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 70,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55,
                            "src": "1951:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 71,
                            "name": "candidatesCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18,
                            "src": "1967:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1951:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1931:51:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        170,
                        171
                      ],
                      "referencedDeclaration": 170,
                      "src": "1923:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 74,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1923:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 75,
                  "nodeType": "ExpressionStatement",
                  "src": "1923:60:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 81,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 76,
                        "name": "voters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "2033:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 79,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 77,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2040:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2040:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2033:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 80,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2054:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2033:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 82,
                  "nodeType": "ExpressionStatement",
                  "src": "2033:25:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "2108:37:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 83,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "2108:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                            "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                          }
                        },
                        "id": 85,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 84,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55,
                          "src": "2119:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2108:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$8_storage",
                          "typeString": "struct Election.Candidate storage ref"
                        }
                      },
                      "id": 86,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "2108:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "2108:37:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 90,
                        "name": "_candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55,
                        "src": "2270:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 89,
                      "name": "votedEvent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22,
                      "src": "2259:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 91,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2259:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 92,
                  "nodeType": "EmitStatement",
                  "src": "2254:29:0"
                }
              ]
            },
            "documentation": null,
            "id": 94,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "vote",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "name": "_candidateId",
                  "nodeType": "VariableDeclaration",
                  "scope": 94,
                  "src": "1678:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1678:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1677:19:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 57,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1704:0:0"
            },
            "scope": 95,
            "src": "1663:627:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 96,
        "src": "80:2212:0"
      }
    ],
    "src": "0:352502:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.23+commit.124ca40d.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0xfff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b16": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_candidateId",
              "type": "uint256"
            }
          ],
          "name": "votedEvent",
          "type": "event",
          "signature": "0xfff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b16"
        }
      },
      "links": {},
      "address": "0xf4b63ffc6a52fa8b43f719b04d94f2e9ab94780b",
      "transactionHash": "0x7dfe170131fe5f9e625766c4489c00890bd8f4678bc0721d16e9dd4de1d6fd74"
    }
  },
  "schemaVersion": "2.0.0",
  "updatedAt": "2019-10-19T20:36:15.980Z"
}